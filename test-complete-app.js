// Script para testar a aplica√ß√£o otimizada
const puppeteer = require('puppeteer');

async function testOptimizedApp() {
  console.log('üöÄ Iniciando teste da aplica√ß√£o AURA otimizada...');
  
  const browser = await puppeteer.launch({ 
    headless: false,
    defaultViewport: { width: 1920, height: 1080 }
  });
  
  try {
    const page = await browser.newPage();
    
    // Monitorar performance
    await page.coverage.startJSCoverage();
    await page.coverage.startCSSCoverage();
    
    // 1. Testar carregamento da p√°gina
    console.log('üì± Testando carregamento da p√°gina...');
    const startTime = Date.now();
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle2' });
    const loadTime = Date.now() - startTime;
    console.log(`‚è±Ô∏è Tempo de carregamento: ${loadTime}ms`);
    
    // 2. Testar login
    console.log('üîê Testando login...');
    await page.waitForSelector('input[name="email"]', { timeout: 10000 });
    await page.type('input[name="email"]', 'interface@teste.com');
    await page.type('input[name="password"]', 'senha123');
    
    await page.click('button[type="submit"]');
    
    // 3. Aguardar dashboard carregar
    console.log('üìä Aguardando dashboard otimizado carregar...');
    await page.waitForSelector('[data-testid="market-selector"], .grid', { timeout: 15000 });
    
    // 4. Testar seletor de mercado compacto
    console.log('üíπ Testando seletor de mercado otimizado...');
    const marketSelector = await page.$('.relative button');
    if (marketSelector) {
      await marketSelector.click();
      await page.waitForTimeout(500);
      
      // Selecionar um s√≠mbolo diferente
      const options = await page.$$('.bg-slate-800 button, [role="option"]');
      if (options.length > 1) {
        await options[1].click();
        console.log('‚úÖ Sele√ß√£o de s√≠mbolo funcionando');
      }
    }
    
    // 5. Testar se apenas um gr√°fico √© carregado
    console.log('üìà Verificando otimiza√ß√£o de gr√°ficos...');
    const charts = await page.$$('canvas, svg[data-chart]');
    console.log(`‚úÖ N√∫mero de gr√°ficos ativos: ${charts.length} (otimizado para 1)`);
    
    // 6. Testar abertura de nova posi√ß√£o
    console.log('üìä Testando formul√°rio de nova posi√ß√£o...');
    const newPositionButton = await page.$('button:has-text("Abrir")');
    if (newPositionButton) {
      await newPositionButton.click();
      await page.waitForTimeout(1000);
      console.log('‚úÖ Formul√°rio de posi√ß√£o funcionando');
    }
    
    // 7. Testar hist√≥rico
    console.log('üìú Testando hist√≥rico de trades...');
    const historyButton = await page.$('button:has-text("Mostrar")');
    if (historyButton) {
      await historyButton.click();
      await page.waitForTimeout(1000);
      console.log('‚úÖ Hist√≥rico de trades funcionando');
    }
    
    // 8. Verificar conex√£o com backend
    console.log('üîó Verificando conex√£o com backend...');
    const connectionStatus = await page.$eval('.w-3.h-3.rounded-full', el => 
      el.classList.contains('bg-green-500') ? 'conectado' : 'desconectado'
    );
    console.log(`‚úÖ Status da conex√£o: ${connectionStatus}`);
    
    // 9. Testar performance de atualiza√ß√£o
    console.log('‚ö° Testando performance de atualiza√ß√£o...');
    const performanceStart = Date.now();
    
    // Simular mudan√ßa de s√≠mbolo m√∫ltiplas vezes
    for (let i = 0; i < 3; i++) {
      const selector = await page.$('.relative button');
      if (selector) {
        await selector.click();
        await page.waitForTimeout(200);
        const options = await page.$$('[role="option"], .bg-slate-800 button');
        if (options[i]) {
          await options[i].click();
          await page.waitForTimeout(300);
        }
      }
    }
    
    const performanceEnd = Date.now() - performanceStart;
    console.log(`‚ö° Tempo de m√∫ltiplas mudan√ßas: ${performanceEnd}ms`);
    
    // 10. Verificar uso de mem√≥ria
    const metrics = await page.metrics();
    console.log(`üíæ Uso de mem√≥ria JS: ${(metrics.JSHeapUsedSize / 1024 / 1024).toFixed(2)}MB`);
    console.log(`üîÑ Layouts: ${metrics.LayoutCount}`);
    
    // Obter cobertura de c√≥digo
    const jsCoverage = await page.coverage.stopJSCoverage();
    const cssCoverage = await page.coverage.stopCSSCoverage();
    
    const jsUsed = jsCoverage.reduce((acc, entry) => acc + entry.ranges.reduce((acc2, range) => acc2 + range.end - range.start, 0), 0);
    const jsTotal = jsCoverage.reduce((acc, entry) => acc + entry.text.length, 0);
    const jsUsagePercent = ((jsUsed / jsTotal) * 100).toFixed(2);
    
    console.log(`üìä Cobertura JS: ${jsUsagePercent}% (${jsUsed}/${jsTotal} bytes)`);
    
    console.log('üéâ Teste de otimiza√ß√£o finalizado com sucesso!');
    console.log('üìã Resumo das otimiza√ß√µes:');
    console.log('  ‚úÖ Cards compactos em combobox');
    console.log('  ‚úÖ Apenas 1 gr√°fico ativo por vez');
    console.log('  ‚úÖ Dados carregados sob demanda');
    console.log('  ‚úÖ Performance otimizada');
    
    // Manter o navegador aberto para inspe√ß√£o manual
    console.log('üîç Navegador mantido aberto para inspe√ß√£o manual...');
    console.log('Pressione Ctrl+C para fechar');
    
    // Aguardar indefinidamente
    await new Promise(() => {});
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  } finally {
    // await browser.close();
  }
}

// Executar teste
testOptimizedApp().catch(console.error);